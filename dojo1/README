Primeiro Dojo.

Implementamos um modelo simples de usuário e grupo, com autenticação. O objetivo desse dojo éramos fazer TDD desde o início, tentando aplicar o DRY sempre que possível.

Segue mais ou menos como fizemos o projeto:

Iniciamos o projeto com o comando rails e preparamos o ambiente, instalando as gems rspec-rails, remarkable_rails, ZenTest e RedGreen. Enquanto isso, o pessoal foi levantando os requisitos para nosso "negócio" (valeu pelo help Rafael!)

Em seguida, executamos rake rspec para fazer o bootstrap de elementos rspec no projeto (tal como a criação do spec.opts e spec_helper) e, com ZenTest instalado, executamos o autospec, para que ele execute os testes automagicamente.

NOTA 1: O autospec roda todos os testes e depois espera até que algum arquivo seja alterado, executando o teste relacionado. Se tudo passar, o autospec roda toda a suíte de testes.

NOTA 2: O autospec/autotest COME o processador no Mac. Pra isso, tem uma gem chamada autotest-fsevent, que alivia o processamento sem mudar de funcionalidade. Após instalado o autospec, crie um arquivo chamado .autotest no seu HOME com: 

require 'autotest/fsevent'

NOTA 3: Ainda no Mac, temos a gem autotest-growl, que dá suporte ao Growl nos testes. Bem legal.

NOTA 4: Usamos no evento a notificação "vanilla" de testes do RSpec. No repositório encontra-se uma opção no rspec.opts que melhora o output do rspec, deixando a coisa mais legal. A opção é --format specdoc (troque o progress por specdoc).

Depois de tudo, começamos trabalhando no model Group, que é bem simples, basicamente usando Remarkable para testar a associação. Em seguida, focamos no model User. 

Com as várias dicas dadas pelo pessoal lá, acredito que aprendemos bastante.
